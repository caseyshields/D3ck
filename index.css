/* Resets and variables ******************************************************/

:root {
    --radius: 0.5rem;
    --gap: 1.0rem;
    --banrner: 2.0rem;
    --margin: 4rem;
}
@media all and (orientation: landscape) {
    :root {
        --primary: #F0F0F0;
        --secondary: #95a38a;
        --tertiary: #add8e6;
    }
}
@media all and (orientation: portrait) {
    :root {
        --primary: #F0F0F0;
        --secondary: #7da8e6;
        --tertiary: #95a38a;
    }
}/* Change the color so I can tell what mode I'm in */

html {
    box-sizing: border-box;
    font-family: Arial, Helvetica, sans-serif;
    scroll-behavior: smooth;
    background-color: var( --primary );
}

*, :before, :after {
    box-sizing: inherit;
    margin: 0;
    padding: 0;
}

/** Page sections ************************************************************/

.hero {
    display: grid;
    align-items: center;
    justify-items: center;
    width: 100%;
    height: 100vh;
    background-color: var( --secondary );
}

header {
    position: sticky;
    top: 0;
}
@media all and (orientation: landscape) {
    footer {
        position: fixed;
        bottom: 0;
        left:0; right:0;
    }
} /* I need this to fix float shenanigans on small filter results sets. */

.banner {
    display: grid;
    grid-template-columns: 3fr repeat( auto-fill, 1fr);
    grid-auto-flow: column;
    padding: var( --gap );
    background-color: var( --secondary );
}

.banner > * {
    text-align: right;
    color: var( --primary );
}

.banner > *:first-child {
    text-align: left;
    color: var( --primary );
}
/* TODO this seems less eloquent.
 * Try to extract some classes for these banners and headers...
 * Maybe styles for color combinations taken from the ternary color scheme? */
/* .label {
    border-radius: var( --radius );
    background-color: var( --secondary );
    color: var( --primary );
    border-radius: var( --radius );
} */

/* Card Styling **************************************************************/
.deck {
    display: grid;
    grid-auto-flow: row;
    grid-template-columns: repeat( auto-fill, minmax(16rem, 1fr));
    grid-auto-rows: minmax( 16rem, 1fr );
    column-gap: var( --margin );
    row-gap: var( --margin );
    padding: var( --margin );
    /* background-color: var(--primary); */
    background-color: none;

    /* height: calc( 100vh - 2 * var( --gap ) - 1em ); */
}

.card {
    display: grid;
    grid-template-rows: 1rem auto;
    grid-template-columns: auto 1rem;
    column-gap: var( --gap );
    row-gap: var( --gap );
    padding: var( --gap );
    background-color: var( --secondary );
    border-radius: var( --radius );
}

.card > a {
    border-radius: var( --radius );
    grid-area: 1 / 1 / 2 / 2;
    color: var( --primary );
    background-color: var( --secondary );
    height : 100%;
    width : 100%;
}

.card > img {
    display: none;
} /** TODO I got to figure out where I'm going to store my images... */

.card > div {
    grid-area: 2 / 1 / 3 / 2;
    height : 100%;
    width : 100%;
    overflow : hidden;
    border-radius: var( --radius );
    padding: 1em;
    background-color: var( --primary );
    color: var( --secondary );
}
.card > div:hover {
    cursor: pointer;
}

.card > ul {
    grid-area: 1 / 2 / 3 / 3;
    writing-mode: vertical-lr;
    align-self: flex-start;
    justify-self: center;
    background-color: transparent;
}

.card li {
    display: inline;
    border-radius: var( --radius );
    margin-bottom: var( --gap );
    color: var( --primary );
    /* display: list-item; */
    /* list-style-type: disc; */
}

/** Styling for modal overlay. ***********************************************/
.preview {
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 9000;
    background-color: #FFFFFF99;
    animation: appear 1s ease;
}
.preview > iframe {
    position: relative;
    top: var( --margin );
    left: var( --margin );
    width: calc( 100vw - 2 * var(--margin) );
    height: calc( 100vh - 2 * var( --margin ) );
    z-index: 9001;
    background-color: var( --primary );
}
  
@keyframes appear {
    0% { opacity:0.0; }
    100% { opacity:1.0; }
}

/** Styling for tag toggle panel *********************************************/
@media all and (orientation: landscape) {
    .toggles {
        background-color: none;
        float: left;
        position: sticky;
        top: calc( 2 * var( --gap ) + 1em);
        width: calc( 2.5 * var( --margin ));
        height: calc( 100vh - 2 * var( --gap ) - 1em );
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        overflow: hidden;
    } /** Not even God knows what you're doing McLane! */
    .tag {
        margin-top: 0.5em;
        padding: 0.25em;
        border: var(--secondary) 0 solid;
        border-radius: var(--radius);
        text-align: right;
    }
}
@media all and (orientation: portrait) {
    .toggles {
        background-color: none;
        padding-left: var(--margin);
        padding-right: var(--margin);
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        align-items: center;
        justify-items: center;
        
    }
    .tag {
        margin-top: 0.5em;
        margin-left: 0.5em;
        padding: 0.25em;
        border: var(--secondary) 0 solid;
        border-radius: var(--radius);
        text-align: center;
    }
}

.tag:hover {
    cursor: pointer;
}
.tag > span.count {
    display: inline-block;
    background-color: var(--primary);
    width: calc( 2 * var(--radius));
    height: calc( 2 * var(--radius));
    border-radius: var(--radius);
    margin-left: 0.2rem;
    text-align: center;
    font-size: smaller;
}

/* invert tag colors depending on selection */
.tag.or, .tag.and > .count {
    color: var(--secondary);
    background-color: var( --primary );
}
.tag.and, .tag.or > .count {
    background-color: var(--secondary);
    color: var(--primary);
}
/* text-decoration: underline overline 0.125em; */
/* text-decoration: line-through wavy var(--tertiary) 0.2em; */

/** Style rules for slideshow component **************************************/

.slideshow {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;

    /* display: grid;
    grid-template-rows: ;
    TODO revise this as a grid... possibly with media query*/

    background-color: #FFFFFF99;
    animation: appear 1s ease;
}

.slideshow > nav {
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
    justify-content: center;
    /* writing-mode: vertical-lr; */
    /* overflow-x: scroll; */
}

.slideshow > nav > a {
    background-color: var( --secondary );
    color: var( --primary );
    border-radius: var( --radius );
    padding: var( --radius );
    margin-top: var(--radius );
    margin-bottom: var(--radius );
    margin-left: var(--radius );
    font-size: smaller;
}

.slideshow > div {
    display: flex;
    flex-wrap: nowrap;
    flex-direction: row;
    
    overflow-x: scroll;
    scroll-behavior: smooth;
    scroll-snap-type: x proximity;
    /* scroll-padding: 50% 0; */
    /* why do none of these work as I anticipate and the mdn docs are written by malicious aliens? */
    scroll-padding-right: 15vmin;
    scroll-padding-left: 15vmin;
}

.slideshow figure {
    /* scroll-snap-align: start; */ /* No effect in FireFox */
    /* Please! Godammit, I hate this hacker crap! */
    width: 70vmin;
    margin-left: 5vmin;
    /*margin-right: 5vmin;*/
}

.slideshow img {
    width: 70vmin;
    background: var( --secondary );
    border-radius: var( --radius );
    /* figure out aspect preserving img sizing up to a fraction of max dimension... */
}

.slideshow figure > figcaption {
    color: var( --primary );
    background: var( --secondary );
    border-radius: var( --radius );
    padding: 1em;
}

/** functional style rules */

.hide { display: none; }
